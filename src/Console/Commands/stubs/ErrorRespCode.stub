<?php

namespace {{Namespace}};

use Aslnbxrz\SimpleException\Contracts\ThrowableEnum;
use Symfony\Component\HttpFoundation\Response;

enum {{ClassName}}: int implements ThrowableEnum
{
    // Add your error codes here
    case UnknownError = 2001;

    public function message(): string
    {
        $messages = match ($this) {
            self::UnknownError => 'An unknown error occurred',
        };

        // Try to get translated message if Laravel is available, fallback to default
        if (function_exists('__')) {
            try {
                $translationKey = '{{LowerClassName}}.' . $this->getTranslationKey();
                $translated = __($translationKey, [], $messages);
                return $translated === $translationKey ? $messages : $translated;
            } catch (\Exception $e) {
                // If translation fails, return default message
                return $messages;
            }
        }

        return $messages;
    }

    private function getTranslationKey(): string
    {
        return match ($this) {
            self::UnknownError => 'unknown_error',
        };
    }

    public function statusCode(): int
    {
        return $this->value;
    }

    public function httpStatusCode(): int
    {
        return match ($this) {
            self::UnknownError => Response::HTTP_INTERNAL_SERVER_ERROR,
        };
    }
}